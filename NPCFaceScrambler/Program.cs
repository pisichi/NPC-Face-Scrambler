using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Noggog;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using System.IO;
using System.Threading.Tasks;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using System;

namespace NPCFaceScrambler
{
    public class Program
    {
        static Lazy<Settings> Settings = null!;
        static Dictionary<string, Dictionary<string, string[]>> femaleNpcsDictionary = new Dictionary<string, Dictionary<string, string[]>>();
        static Dictionary<string, Dictionary<string, string[]>> maleNpcsDictionary = new Dictionary<string, Dictionary<string, string[]>>();
        // static bool patchFemaleNpcs = Settings.Value.PatchFemale;
        // static bool patchMaleNpcs = Settings.Value.PatchMale;
        // static bool sameName = Settings.Value.SameName;



        public static Task<int> Main(string[] args)
        {
            return SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "NPCFaceScrambler.esp")
                .Run(args);
        }

        public static string Rand(string[] originId, int seed)
        {
            Random rnd;
            var isDupeName = Settings.Value.SameName;

            //Check name rule
            if (isDupeName)
            {
                rnd = new Random(seed);
            }
            else
            {
                rnd = new Random();
            }
            int index = rnd.Next(originId.Length);
            return originId[index];
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {

            var outputDir = Settings.Value.FacegenOutputDirectory;

            //From Face fixer
            if (Settings.Value.TargetMods.Count == 0)
            {
                System.Console.WriteLine("Must at least specify one target mod in order.");
                return;
            }

            var npcGroups = state.LoadOrder.ListedOrder
                .Select(listing => listing.Mod)
                .NotNull()
                .Select(x => (x.ModKey, x.Npcs))
                .Where(x => x.Npcs.Count > 0 && Settings.Value.TargetMods.Contains(x.ModKey))
                .ToArray();
            System.Console.WriteLine();
            System.Console.Write("Target mod(s): ");
            foreach (var modKey in npcGroups.Select(x => x.ModKey))
            {
                System.Console.Write($"{modKey}");
            }

            System.Console.WriteLine();
            System.Console.WriteLine();

            CreateNpcsPool(state);

            System.Console.WriteLine();

            uint count = 0;

            uint corrupt = 0;


            // foreach (var npcGroup in npcGroups)
            // {
            //     System.Console.WriteLine($"{npcGroup.Npcs}");
            // }



            // // For every Npc that exists
            // foreach (var npc in state.LoadOrder.PriorityOrder.Npc().WinningOverrides())
            // {
            //For every Npc group in our target mods, in order
            foreach (var npcGroup in npcGroups)
            {

                foreach (var npc in npcGroup.Npcs)
                {
                    var modifiedNpc = state.PatchMod.Npcs.GetOrAddAsOverride(npc);
                    var npcRace = (modifiedNpc.Race.Resolve(state.LinkCache)).EditorID;
                    bool isFemale = npc.Configuration.Flags.HasFlag(NpcConfiguration.Flag.Female);

                    // System.Console.WriteLine($"--- Patching : {npc.Name} || {count}/{npcGroup.Npcs.Count} ---");
                    System.Console.WriteLine("-------------------");

                    if (npcRace != null)
                    {
                        // check condition
                        if (!IsSelectedRace(npcRace.ToString()))
                        {
                            System.Console.WriteLine("|\t\t@Skipping Npc || Not in selected Race");
                            System.Console.WriteLine("-------------------\n");
                            continue;
                        }


                        // female only
                        if (!Settings.Value.PatchMale)
                        {
                            if (!isFemale)
                            {
                                System.Console.WriteLine("|\t\t@Skipping Npc || Not Female");
                                System.Console.WriteLine("-------------------\n");
                                continue;
                            }
                        }

                        // male only
                        if (!Settings.Value.PatchFemale)
                        {
                            if (isFemale)
                            {
                                System.Console.WriteLine("|\t\t@Skipping Npc || Not Male");
                                System.Console.WriteLine("-------------------\n");
                                continue;
                            }
                        }


                        string npcName = npc.Name!.ToString() ?? "test";

                        if (npcName.Contains("test"))
                        {
                            System.Console.WriteLine("|\t\t@Skipping Npc || Has unsupported Name");
                            System.Console.WriteLine("-------------------\n");
                            continue;
                        }

                        //  ource Npc id
                        string originId = "";

                        // Seed if using same name
                        int seed = 0;

                        // attemp count
                        int attempt = 0;
                        bool isHasFaceGen = false;


                        // // Generate seed from name
                        // if (modifiedNpc.Name != null)
                        // {
                        //     seed = (int)modifiedNpc.Name.ToString()[0] % 32;
                        // }

                        while (!isHasFaceGen)
                        {
                            attempt++;
                            System.Console.WriteLine($"|\t-Attempt : {attempt}");

                            // If reached  attempt limit, break out of the loop
                            if (attempt > 10)
                            {
                                System.Console.WriteLine("|\t\t@Pass limit attempt - Skip the Npc");
                                isHasFaceGen = true;
                                break;
                            }

                            if (!femaleNpcsDictionary[npcRace].ContainsKey(modifiedNpc.Weight.ToString()))
                            {
                                System.Console.WriteLine("|\t\t@No weight in range, randomizing weight...");

                                Random rnd = new Random();

                                var weightKeys = femaleNpcsDictionary[npcRace].Keys.ToArray();
                                // randomize the weight from keys
                                var randomWeight = weightKeys[rnd.Next(weightKeys.Length)];

                                if (femaleNpcsDictionary[npcRace].ContainsKey(randomWeight.ToString()))
                                {
                                    originId = Rand(femaleNpcsDictionary[npcRace][randomWeight.ToString()], seed);
                                }
                                else
                                {
                                    System.Console.WriteLine("|\t\t@No race found");
                                    System.Console.WriteLine("-------------------\n");
                                    break;
                                }
                            }
                            else
                            {
                                System.Console.WriteLine("|\t-Pass weight check");
                                originId = Rand(femaleNpcsDictionary[npcRace][modifiedNpc.Weight.ToString()], seed);
                            }


                            var origin = state.LoadOrder.PriorityOrder.Npc().WinningOverrides().Where(npc => (npc.FormKey.IDString().Equals(originId))).Select(npc => npc.DeepCopy()).ToArray();

                            var originNpc = origin[0];
                            
                            System.Console.WriteLine($"|\t\t* Source NPC : {originNpc.FormKey.IDString()} {originNpc.Name} || Race : {npcRace} || Weight : {originNpc.Weight} *");
                            System.Console.WriteLine($"|\t\t* Target NPC : {npc.FormKey.IDString()} {npc.Name} || Race : {npcRace} || Weight : {npc.Weight} *");

                            //From NPC appreance copier
                            //HANDLE FACEGEN HERE
                            string originNifPath = state.DataFolderPath + "\\meshes\\actors\\character\\facegendata\\facegeom\\" + originNpc.FormKey.ModKey.ToString() + "\\00" + originNpc.FormKey.IDString() + ".nif";
                            string modedNifPath = outputDir + "\\meshes\\actors\\character\\facegendata\\facegeom\\" + modifiedNpc.FormKey.ModKey.ToString() + "\\00" + modifiedNpc.FormKey.IDString() + ".nif";
                            if (!File.Exists(originNifPath))
                            {
                                Console.WriteLine("|\t\t@The following Facegen .nif does not exist. If it is within a BSA, please extract it. Patching of this NPC will be repeat.\n|\t{0}", originNifPath);
                                continue;
                            }
                            else
                            {
                                Console.WriteLine("|\t-Found Facegen .nif. Proceeding to patch...");
                            }

                            string originDdsPath = state.DataFolderPath + "\\textures\\actors\\character\\facegendata\\facetint\\" + originNpc.FormKey.ModKey.ToString() + "\\00" + originNpc.FormKey.IDString() + ".dds";
                            string modedDdsPath = outputDir + "\\textures\\actors\\character\\facegendata\\facetint\\" + modifiedNpc.FormKey.ModKey.ToString() + "\\00" + modifiedNpc.FormKey.IDString() + ".dds";
                            if (!File.Exists(originDdsPath))
                            {
                                Console.WriteLine("|\t\t@The following Facegen .dds does not exist. If it is within a BSA, please extract it. Patching of this NPC will be repeat.\n|\t{0}", originDdsPath);
                                continue;
                            }
                            else
                            {
                                Console.WriteLine("|\t-Found Facegen .dds. Proceeding to patch...");
                            }


                            // Copy NPC Facegen Nif and Dds from the donor to acceptor NPC

                            // first make the output paths if they don't exist
                            Directory.CreateDirectory(outputDir + "\\meshes\\actors\\character\\facegendata\\facegeom\\" + modifiedNpc.FormKey.ModKey.ToString());
                            Directory.CreateDirectory(outputDir + "\\textures\\actors\\character\\facegendata\\facetint\\" + modifiedNpc.FormKey.ModKey.ToString());

                            // then copy the facegen to those paths
                            File.Copy(originNifPath, modedNifPath, true);
                            File.Copy(originDdsPath, modedDdsPath, true);

                            // END FACEGEN

                            // //Race
                            // modifiedNpc.Race.SetTo(originNpc.Race);

                            //Head Texture
                            modifiedNpc.HeadTexture.SetTo(originNpc.HeadTexture.FormKeyNullable);

                            //Head Parts
                            modifiedNpc.HeadParts.Clear();
                            bool hasPotentialError = false;
                            string errorHp = "";
                            foreach (var hp in originNpc.HeadParts)
                            {

                                string HeadPart = hp.Resolve(state.LinkCache).EditorID!.ToString();
                                Console.WriteLine("|\t\t-Adding Head Part: " + HeadPart);

                                // if (HeadPart.Contains())
                                if (ContainsAny(HeadPart, Settings.Value.blockHp))
                                {
                                    corrupt++;
                                    errorHp = HeadPart;
                                    hasPotentialError = true;
                                    Console.WriteLine("|\t\t@The following Facegen is in the block list, Skip", hp.FormKey.IDString(), HeadPart);
                                    break;
                                }
                                else
                                {
                                    modifiedNpc.HeadParts.Add(hp);
                                }
                            }

                            if (hasPotentialError)
                            {
                                Console.WriteLine("|\t\t@The following Facegen has potential error, Skip", errorHp);
                                continue;
                            }
                            else
                            {
                                isHasFaceGen = true;
                            }

                            //Face Morph
                            if (modifiedNpc.FaceMorph != null && originNpc.FaceMorph != null)
                            {
                                modifiedNpc.FaceMorph.Clear();
                                modifiedNpc.FaceMorph.DeepCopyIn(originNpc.FaceMorph);
                            }

                            //Face Parts
                            if (modifiedNpc.FaceParts != null && originNpc.FaceParts != null)
                            {
                                modifiedNpc.FaceParts.Clear();
                                modifiedNpc.FaceParts.DeepCopyIn(originNpc.FaceParts);
                            }

                            //Body Texture
                            modifiedNpc.WornArmor.SetTo(originNpc.WornArmor.FormKeyNullable);

                            //Hair Color
                            modifiedNpc.HairColor.SetTo(originNpc.HairColor.FormKeyNullable);

                            //Texture Lighting
                            modifiedNpc.TextureLighting = originNpc.TextureLighting;

                            //Tint Layers
                            modifiedNpc.TintLayers.Clear();
                            foreach (var tl in originNpc.TintLayers)
                            {
                                TintLayer newTintLayer = new TintLayer();
                                newTintLayer.DeepCopyIn(tl);
                                modifiedNpc.TintLayers.Add(newTintLayer);
                            }

                            //Height and Weight
                            modifiedNpc.Height = originNpc.Height;
                            modifiedNpc.Weight = originNpc.Weight;

                            System.Console.WriteLine("Complete");
                            System.Console.WriteLine("-------------------\n");

                        }
                        count++;
                    }
                }
            }
            // System.Console.WriteLine("Finished" + seperateWeight);

            System.Console.WriteLine($"Patches {count} Npcs");
            System.Console.WriteLine($"Skip {corrupt} Npcs");
        }

        public static void CreateNpcsPool(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var npcGroups = state.LoadOrder.ListedOrder
               .Select(listing => listing.Mod)
               .NotNull()
               .Select(x => (x.ModKey, x.Npcs))
               .Where(x => x.Npcs.Count > 0 && Settings.Value.SourceMods.Contains(x.ModKey))
               .ToArray();

            System.Console.Write("Source Mod(s): ");
            foreach (var modKey in npcGroups.Select(x => x.ModKey))
            {
                System.Console.Write($" {modKey},");
            }

            System.Console.WriteLine();

            uint count = 0;


            Dictionary<string, Dictionary<string, string[]>> npcsDictionary;


            foreach (var npcGroup in npcGroups)
            {

                foreach (var pickedNpc in npcGroup.Npcs)
                {
                    var npcRace = (pickedNpc.Race.Resolve(state.LinkCache)).EditorID;
                    bool isFemale = pickedNpc.Configuration.Flags.HasFlag(NpcConfiguration.Flag.Female);
                    bool isProtected = pickedNpc.Configuration.Flags.HasFlag(NpcConfiguration.Flag.Essential) || pickedNpc.Configuration.Flags.HasFlag(NpcConfiguration.Flag.Protected);
                    // bool isProtected = true;

                    if (isFemale)
                    {
                        npcsDictionary = femaleNpcsDictionary;
                    }
                    else
                    {
                        // continue;
                        npcsDictionary = maleNpcsDictionary;
                    }


                    if (npcRace != null)
                    {
                        if (!IsSelectedRace(npcRace.ToString()) || !isProtected)
                        {
                            continue;
                        }
                        // add weight as key and FormKey as value to seperateWeight Dictionary, if key exists, add to array
                        if (npcsDictionary.ContainsKey(npcRace))
                        {
                            // if key weight exists, add to array
                            if (npcsDictionary[npcRace].ContainsKey(pickedNpc.Weight.ToString()))
                            {
                                npcsDictionary[npcRace][pickedNpc.Weight.ToString()] = npcsDictionary[npcRace][pickedNpc.Weight.ToString()].Concat(new string[] { pickedNpc.FormKey.IDString() }).ToArray();
                            }
                            else
                            {
                                npcsDictionary[npcRace].Add(pickedNpc.Weight.ToString(), new string[] { pickedNpc.FormKey.IDString() });
                            }
                        }
                        else
                        {
                            npcsDictionary.Add(npcRace, new Dictionary<string, string[]> { { pickedNpc.Weight.ToString(), new string[] { pickedNpc.FormKey.IDString() } } });
                        }
                    }

                    if (isFemale)
                    {
                        femaleNpcsDictionary = npcsDictionary;
                    }
                    else
                    {
                        maleNpcsDictionary = npcsDictionary;
                    }
                    count++;
                }
            }

            var femaleNpcsCount = 0;

            foreach (var key in femaleNpcsDictionary.Keys)
            {
                // System.Console.WriteLine("{0} : {1}", key, femaleNpcsDictionary[key]);
                foreach (var weight in femaleNpcsDictionary[key].Keys)
                {
                    // System.Console.WriteLine("\t{0} : {1}", weight, femaleNpcsDictionary[key][weight].Length);
                    femaleNpcsCount += femaleNpcsDictionary[key][weight].Length;
                    // foreach (var npc in femaleNpcsDictionary[key][weight])
                    // {
                    //     System.Console.WriteLine("\t{0}", npc);
                    // }
                }
            }
            System.Console.WriteLine();
            System.Console.WriteLine("Female npc counts: " + femaleNpcsCount);

            var maleNpcsCount = 0;

            foreach (var key in maleNpcsDictionary.Keys)
            {
                // System.Console.WriteLine("{0} : {1}", key, maleNpcsDictionary[key]);
                foreach (var weight in maleNpcsDictionary[key].Keys)
                {
                    // System.Console.WriteLine("\t{0} : {1}", weight, maleNpcsDictionary[key][weight].Length);
                    maleNpcsCount += maleNpcsDictionary[key][weight].Length;
                    // foreach (var npc in femaleNpcsDictionary[key][weight])
                    // {
                    //     System.Console.WriteLine("\t{0}", npc);
                    // }
                }
            }
            System.Console.WriteLine();
            System.Console.WriteLine("Male npc counts: " + maleNpcsCount);
            System.Console.WriteLine();
            System.Console.WriteLine($"{count} Npcs add to pools");
        }

        public static bool IsSelectedRace(String race)
        {
            if (race == "RedguardRace" || race == "NordRace" || race == "BretonRace" || race == "ImperialRace" || race == "KhajiitRace" || race == "DarkElfRace" || race == "HighElfRace" || race == "WoodElfRace" || race == "ArgonianRace" || race == "OrcRace")
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public static bool ContainsAny(string stringToTest, List<string> substrings)
        {
            if (string.IsNullOrEmpty(stringToTest) || substrings == null)
                return false;

            foreach (var substring in substrings)
            {
                if (stringToTest.Contains(substring, StringComparison.CurrentCultureIgnoreCase))
                    return true;
            }
            return false;
        }

    }
}



